#pragma once

// 《挑战程序设计竞赛》（第2版）示例代码

namespace lib1 {

	// 初级 - 穷竭搜索 - 深度优先搜索 - 部分和问题
	namespace p214q1 {
		void read_case();
		void solve();
	}

	// 初级 - 穷竭搜索 - 深度优先搜索 - POJ 2386. Lake Counting
	namespace p214q2 {
		void read_case();
		void solve();
	}

	// 初级 - 穷竭搜索 - 宽度优先搜索 - 迷宫最短路径
	namespace p215 {
		void read_case();
		void solve();
	}

	// 初级 - 动态规划 - 记忆化搜索与动态规划 - 01背包
	namespace p231q1 {
		void read_case();
		void solve();
	}

	// 初级 - 动态规划 - 记忆化搜索与动态规划 - 最长公共子序列
	namespace p231q2 {
		void read_case();
		void solve();
	}

	// 初级 - 动态规划 - 进一步探讨递推关系 - 完全背包
	namespace p232q1 {
		void read_case();
		void solve();
	}

	// 初级 - 动态规划 - 进一步探讨递推关系 - 01背包变形
	namespace p232q2 {
		void read_case();
		void solve();
	}

	// 初级 - 动态规划 - 进一步探讨递推关系 - 多重部分和问题
	namespace p232q3v1 {
		void read_case();
		void solve();
	}

	// 初级 - 动态规划 - 进一步探讨递推关系 - 多重部分和问题优化
	namespace p232q3v2 {
		void read_case();
		void solve();
	}

	// 初级 - 动态规划 - 进一步探讨递推关系 - 最长上升子序列问题
	namespace p232q4v1 {
		void read_case();
		void solve();
	}

	// 初级 - 动态规划 - 进一步探讨递推关系 - 最长上升子序列问题优化
	namespace p232q4v2 {
		void read_case();
		void solve();
	}

	// 初级 - 动态规划 - 有关计数的DP - 划分数
	namespace p233q1 {
		void read_case();
		void solve();
	}

	// 初级 - 动态规划 - 有关计数的DP - 多重集组合数
	namespace p233q2 {
		void read_case();
		void solve();
	}

	// 初级 - 数据结构 - 并查集 - 并查集的实现
	namespace p244q1 {
		void read_case();
		void solve();
	}


	// 初级 - 数据结构 - 并查集 - POJ 1182. 食物链
	namespace p244q2 {
		void read_case();
		void solve();
	}

	// 初级 - 图算法 - 图的搜索 - 二分图判定
	namespace p253q1 {
		void read_case();
		void solve();
	}

	// 初级 - 图算法 - 最短路问题 - Bellmsn-Ford算法
	namespace p254q1 {
		void read_case();
		void solve();
	}

	// 初级 - 图算法 - 最短路问题 - Dijkstra算法
	namespace p254q2v1 {
		// todo
	}

	// 初级 - 图算法 - 最短路问题 - Dijkstra算法邻接表实现
	namespace p254q2v2 {
		void read_case();
		void solve();
	}

	// 初级 - 图算法 - 最短路问题 - Floyd算法
	namespace p254q3 {
		void read_case();
		void solve();
	}

	// 初级 - 图算法 - 最短路问题 - 路径还原
	namespace p254q4 {
		void read_case();
		void solve();
	}

	// 初级 - 图算法 - 最小生成树 - Prim算法
	namespace p255q1 {
		void read_case();
		void solve();
	}

	// 初级 - 图算法 - 最小生成树 - 最小生成树Kruskal算法
	namespace p255q2 {
		void read_case();
		void solve();
	}

	// 初级 - 数学 - 辗转相除法 - 线段上格点的个数
	namespace p261q1 {
		int gcd(int a, int b);
		//void read_case();
		//void solve();
	}

	// 初级 - 数学 - 辗转相除法 - 双六
	namespace p261q2 {
		int extgcd(int a, int b, int& x, int& y);
		//void read_case();
		//void solve();
	}

	// 初级 - 数学 - 素数 - 素数判定
	namespace p262q1 {
		void read_case();
		void solve();
	}

	// 初级 - 数学 - 素数 - 素数的个数
	namespace p262q2 {
		void read_case();
		void solve();
	}

	// 初级 - 数学 - 素数 - 区间内素数的个数
	namespace p262q3 {
		void read_case();
		void solve();
	}

	// 初级 - 数学 - 快速幂 - UVA 10006. Carmichael Numbers
	namespace p264q1 {
		void read_case();
		void solve();
	}

	// 中级 - 二分 - 二分查找 - lower_bound
	namespace p311q1 {
		void read_case();
		void solve();
	}

	// 中级 - 二分 - 二分答案 - Cable master (POJ 1064)
	namespace p312q1 {
		void read_case();
		void solve();
	}

	// 中级 - 二分 - 最大化最小值 - Aggressive Cows (POJ 2456)
	namespace p313q1 {
		void read_case();
		void solve();
	}

	// 中级 - 二分 - 最大化平均值 - 最大化平均值
	namespace p314q1 {
		void read_case();
		void solve();
	}

	// 中级 - 技巧 - 尺取法 -  POJ 3061. Subsequence
	namespace p321q1 {
		void read_case();
		void solve();
	}

	// 中级 - 技巧 - 尺取法 -  POJ 3320. Jessica's Reading Problem
	namespace p321q2 {
		void read_case();
		void solve();
	}

	// 中级 - 技巧 - 开关问题 - POJ 3276. Face the Right Way
	namespace p322q1 {
		void read_case();
		void solve();
	}

	// 中级 - 技巧 - 开关问题 - POJ 3279. Fliptile
	namespace p322q2 {
		void read_case();
		void solve();
	}

	// 中级 - 技巧 - 弹性碰撞 - POJ 3684. Physics Experiment
	namespace p323q1 {
		void read_case();
		void solve();
	}

	// 中级 - 技巧 - 折半枚举 - POJ 2785. 4 values whose sum is 0
	namespace p324q1 {
		void read_case();
		void solve();
	}

	// 中级 - 技巧 - 折半枚举 - 超大背包问题
	namespace p324q2 {
		void read_case();
		void solve();
	}

	// 中级 - 技巧 - 坐标离散化 - 区域的个数
	namespace p325q1 {
		void read_case();
		void solve();
	}

	// 中级 - 数据结构 - 线段树 - RMQ问题
	namespace p331q1 {
		void read_case();
		void solve();
	}

	// 中级 - 数据结构 - 线段树 - POJ 2991. Crane
	namespace p331q2 {
		void read_case();
		void solve();
	}

	// 中级 - 数据结构 - 树状数组 - 树状数组的实现
	namespace p332q1 {
		void read_case();
		void solve();
	}

	// 中级 - 数据结构 - 树状数组 - 冒泡排序的交换次数
	namespace p332q2 {
		void read_case();
		void solve();
	}

	// 中级 - 数据结构 - 树状数组 - POj 3468. 一个简单的整数问题，做法一
	namespace p332q3v1 {
		void solve();
	}

	// 中级 - 数据结构 - 树状数组 - POJ 3468. 一个简单的整数问题，做法二
	namespace p332q3v2 {
		void solve();
	}

	// 中级 - 数据结构 - 分块 - RMQ问题
	namespace p333q1 {
		// todo
	}

	// 中级 - 数据结构 - 分块 - POj 2104. K-th number,做法二
	namespace p333q2v1 {
		void solve();
	}

	// 中级 - 数据结构 - 分块 - POj 2104. K-th number,做法二
	namespace p333q2v2 {
		void solve();
	}

	// 中级 - DP - 状压DP - 旅行商问题
	namespace p341q1 {
		void solve();
	}

	// 中级 - DP - 状压DP - POJ 2686. Travelling by Stagecoach
	namespace p341q2 {
		void solve();
	}

	// 中级 - DP - 状压DP - 铺砖问题
	namespace p341q3 {
		void solve();
	}

	// 中级 - DP - 矩阵幂 - 斐波那契数列
	namespace p342q1 {
		void solve();
	}

	// 中级 - DP - 矩阵幂 - POJ 3734. Blocks
	namespace p342q2 {
		void solve();
	}

	// 中级 - DP - 矩阵幂 - 长度为K的路径计数
	namespace p342q3 {
		void solve();
	}

	// 中级 - DP - 矩阵幂 - POJ 3233. Matrix Power Series
	namespace p342q4 {
		void solve();
	}

	// 中级 - 网络流 - 最大流 - 最大传输费用(Ford-Fulkerson算法)
	namespace p351q1 {
		void set_v(int V_);
		void add_edge(int from, int to, int cap);
		int max_flow(int s, int t);
		//void read_case();
		//void solve();
	}

	// 中级 - 网络流 - 最大流 - Dinic算法
	namespace p352q1 {
		void set_v(int V_);
		void add_edge(int from, int to, int cap);
		int max_flow(int s, int t);
		//void read_case();
		//void solve();
	}

	// 中级 - 网络流 - 二分图匹配 - 指派问题
	namespace p353q1 {
		void set_v(int V_);
		void add_edge(int u, int v);
		int biparite_matching();
		//void read_case();
		//void solve();
	}

	// 中级 - 网络流 - 最小费用流 - 最小传输费用
	namespace p356q1 {
		void set_v(int V_);
		void add_edge(int from, int to, int cap, int cost);
		int min_cost_flow(int s, int t, int f);
		//void read_case();
		//void solve();
	}

	// 中级 - 网络流 - 应用 - POJ 3041. Asteroids
	namespace p357q1 {
		void solve();
	}

	// 中级 - 网络流 - 应用 - POJ 3057. Evacuation
	namespace p357q2v2 {
		void solve();
	}

	// 中级 - 网络流 - 应用 - POJ 3281. Dining
	namespace p357q3 {
		void read_case();
		void solve();
	}

	// 中级 - 网络流 - 应用 - POJ 3469. Dual Core CPU
	namespace p357q4 {
		void read_case();
		void solve();
	}

	// 中级 - 网络流 - 应用 - POJ 2135. Farm Tour
	namespace p357q5 {
		void read_case();
		void solve();
	}

	// 中级 - 网络流 - 应用 - POJ 2135. Evacuation Plan,方法一
	namespace p357q6v1 {
		void read_case();
		void solve();
	}

	// 中级 - 网络流 - 应用 - POJ 2135. Evacuation Plan,方法二
	namespace p357q6v2 {
		// todo
	}

	// 中级 - 网络流 - 应用 - POJ 3686. The Windy's
	namespace p357q7 {
		void read_case();
		void solve();
	}

	// 中级 - 网络流 - 应用 - POJ 3680. Intervals
	namespace p357q8 {
		void read_case();
		void solve();
	}

	// 中级 - 计算几何 - 计算几何基础 - POJ 1127. Jack Straws
	namespace p361q1 {
		struct P {
			double x, y;
			P();
			P(double x, double y);
			P operator+(P p);
			P operator-(P p);
			P operator*(double d);
			double dot(P p);
			double det(P p);
		};
		bool on_seg(P p1, P p2, P q);// 判断点q是否在直线上
		P intersection(P p1, P p2, P q1, P q2);// 计算两直线的交点

		//void read_case();
		//void solve();
	}

	// 中级 - 计算几何 - 极限情况 - AOJ 2308. White Bird
	namespace p362q1 {
		void read_case();
		void solve();
	}

	// 中级 - 计算几何 - 平面扫描 - POJ 2932. Coneology
	namespace p363q1 {
		void read_case();
		void solve();
	}

	// 中级 - 计算几何 - 凸包 - POJ 2187. Beauty Contest
	namespace p364q1 {
		void read_case();
		void solve();
	}

	// 中级 - 计算几何 - 数值积分 - AOJ 1313. Intersection of Two Prisms
	namespace p365q1 {
		void read_case();
		void solve();
	}

	// 高级 - 数学 - 矩阵 - 高斯消元法
	namespace p411q1 {
		typedef vector<double> vec;
		typedef vector<vec> mat;

		vec gauss_jordan(const mat& A, const vec& b);
	}

	// 高级 - 数学 - 矩阵 - 高斯消元法 - Random Walk
	namespace p411q2 {
		// todo
	}

	// 高级 - 数学 - 模运算 - 求逆元
	namespace p412q1 {
		int mod_inverse(int a, int m);
	}

	// 高级 - 数学 - 模运算 - 费马小定理
	namespace p412q2 {
		int euler_phi(int n); // 求欧拉函数值

		const int MAX_N = 10000;
		extern int euler[MAX_N];
		void euler_phi2(); // O(MAX_N)时间筛出欧拉函数值的表
	}

	// 高级 - 数学 - 模运算 - 线性同余方程组
	namespace p412q3 {
		PII linear_congruence(VI& A, VI& B, VI& M);
	}

}
